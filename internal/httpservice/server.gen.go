// Package httpservice provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/flypay/go-kit/v4 version (devel) DO NOT EDIT.
package httpservice

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new user
	// (POST /user)
	UserAdd(ctx echo.Context) error
	// Get a user by ID
	// (GET /user/{id})
	UserGet(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UserAdd converts echo context to params.
func (w *ServerInterfaceWrapper) UserAdd(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserAdd(ctx)
	return err
}

// UserGet converts echo context to params.
func (w *ServerInterfaceWrapper) UserGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserGet(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/user", wrapper.UserAdd)
	router.GET(baseURL+"/user/:id", wrapper.UserGet)
}

type UserAddRequestObject struct {
	Body *UserAddJSONRequestBody
}

type UserAddResponseObject interface {
	VisitUserAddResponse(w http.ResponseWriter) error
}

type UserAdd201Response struct{}

func (response UserAdd201Response) VisitUserAddResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type UserGetRequestObject struct {
	Id string `json:"id"`
}

type UserGetResponseObject interface {
	VisitUserGetResponse(w http.ResponseWriter) error
}

type UserGet200Response struct{}

func (response UserGet200Response) VisitUserGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UserGet404Response struct{}

func (response UserGet404Response) VisitUserGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add a new user
	// (POST /user)
	UserAdd(ctx context.Context, request UserAddRequestObject) (UserAddResponseObject, error)
	// Get a user by ID
	// (GET /user/{id})
	UserGet(ctx context.Context, request UserGetRequestObject) (UserGetResponseObject, error)
}

type (
	StrictHandlerFunc    = strictecho.StrictEchoHandlerFunc
	StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc
)

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// UserAdd operation middleware
func (sh *strictHandler) UserAdd(ctx echo.Context) error {
	var request UserAddRequestObject

	var body UserAddJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserAdd(ctx.Request().Context(), request.(UserAddRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserAdd")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserAddResponseObject); ok {
		return validResponse.VisitUserAddResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserGet operation middleware
func (sh *strictHandler) UserGet(ctx echo.Context, id string) error {
	var request UserGetRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserGet(ctx.Request().Context(), request.(UserGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserGetResponseObject); ok {
		return validResponse.VisitUserGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"H4sIAAAAAAAC/6xUUW/TMBD+K9bBY9J0sKe8FU1M016QBhLSVCHXvjQeiW3sc6dQ5b+js9etbKtAgqc4",
	"zd333X3f5+5BudE7i5YitHuIqsdR5uOXiIGfPjiPgQzmX3GUZuADTR6hhUjB2C3MFXQmRPpm5Yivfh7k",
	"6a9zBQF/JBNQQ3t7jHTcVz2Qr6tDv9vcoaLcH1GlYGi64QXKqCtvrnFaJer5zVhooUepMUAFZRD4Wn8c",
	"JqpX3tTXOMEjsMytMDOysZ1jAI1RBePJOEbaOEdKjr7+6bDuBnePoY6DVN9r1UuiTEKGBvzL2h2GWJCX",
	"i+XijBVzHq30Blp4v1gullCBl9Tn1Zp0MMdF4idbJHm0Kw1ttm6lNRRZMdIHpycuU84S2twhvR+Myj3N",
	"XWTmg/t8ehuwgxbeNE/xaB6y0eRgzHNxLXpnY9H73fLspU5cLGJSCmPs0jBMQmqNuniWxlGGCVpYaS2k",
	"sHgvUgGvyorN3uiZQbd4Ys1LpCxMkCMShgjt7asjXF1AVTLAIj4lwBxUKuGjkLA60uF5UNcvdl6e2Dkg",
	"pWB50wrOl+cnqqwj0blknwtyiSRkFkNsJh5+Pg55XvI43rdrnixi2L0uwafgdFL8ItDuTHB25BhUkMLA",
	"14LIx7Zp/hjURcfXxQ+SOhfGhXIjzNVzshuSW2O3/4MpFqgTRBe4w8F5Jvg3snrPaYheKpwLscZdJq1g",
	"J4ORm6HY/VhW7OxkGghaYJ8e/qJ+n/Bzj+KxR7hOUI9CH43NlhmFlUgxSb4dk0tBHPAWbPt6/hUAAP//",
	"6HBIS6UFAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
